{"version":3,"sources":["components/core/HttpService.ts","components/InputPage/InputPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["HttpService","API_URL","slug","queryParams","a","url","this","requestOptions","method","reducer","accumulator","currValue","queryString","Object","entries","reduce","fetch","data","json","resp","InputPage","httpService","useState","text","setText","sendWords","event","preventDefault","words","split","filter","word","trim","length","wordsString","JSON","stringify","makeGetRequest","className","value","onChange","e","target","type","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6RAKqBA,E,iDAGjBC,QAAkB,8B,yFAGlB,WAAqBC,EAAcC,GAAnC,yBAAAC,EAAA,6DACQC,EAAMC,KAAKL,QAAUC,EACrBK,EAAiB,CACjBC,OAAQ,OAGe,qBAAhBL,IACHM,EAAU,SAACC,EAAqBC,GAAtB,OACVD,EAAc,IAAMC,EAAU,GAAK,IAAMA,EAAU,IAEnDC,EAAeC,OAAOC,QAAQX,GAAaY,OAAON,EAAS,IAC/DJ,GAAO,IAAMO,GAXrB,SAc0BI,MAAMX,EAAKE,GAdrC,cAcQU,EAdR,gBAe0BA,EAAKC,OAf/B,cAeQC,EAfR,yBAgBWA,GAhBX,iD,+EC6BWC,EA/B6B,WACxC,IAAMC,EAAc,IAAIrB,EADsB,EAEtBsB,mBAAiB,IAFK,mBAEvCC,EAFuC,KAEjCC,EAFiC,KAQxCC,EAAS,uCAAG,WAAOC,GAAP,mBAAAtB,EAAA,sDACdsB,EAAMC,iBAEAC,EANCL,EAAKM,MAAM,MAAMC,QAAO,SAAAC,GAAI,OAAIA,EAAKC,OAAOC,OAAS,KAOtDC,EAAsBC,KAAKC,UAAUR,GAErCzB,EAAc,CAChByB,MAAOM,GAEXb,EAAYgB,eAAe,GAAIlC,GATjB,2CAAH,sDAYf,OACI,sBAAKmC,UAAU,aAAf,UACI,0BACIC,MAAOhB,EACPiB,SAAU,SAACC,GAAD,OAAOjB,EAAQiB,EAAEC,OAAOH,UAEtC,wBAAQI,KAAK,SAASC,QAASnB,EAA/B,wBCpBGoB,MAXf,WACE,OACE,qBAAKP,UAAU,MAAf,SACE,sBAAKA,UAAU,kBAAf,UACE,mBAAGA,UAAU,aAAb,oCACA,cAAC,EAAD,UCKOQ,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e6ae3abb.chunk.js","sourcesContent":["interface QueryParams {\r\n    [key: string]: string;\r\n}\r\n\r\n\r\nexport default class HttpService {\r\n\r\n    // API_URL: string = \"https://7z39hjjfg1.execute-api.eu-west-2.amazonaws.com\";\r\n    API_URL: string = \"http://127.0.0.1:5000/words\";\r\n\r\n\r\n    async makeGetRequest(slug: string, queryParams?: QueryParams): Promise<any> {\r\n        let url = this.API_URL + slug;\r\n        let requestOptions = {\r\n            method: \"GET\"\r\n        };\r\n\r\n        if (typeof queryParams !== \"undefined\") {\r\n            let reducer = (accumulator: string, currValue: string[]) => (\r\n                accumulator + '&' + currValue[0] + '=' + currValue[1]\r\n            );\r\n            let queryString =  Object.entries(queryParams).reduce(reducer, '');\r\n            url += '?' + queryString;\r\n        };\r\n\r\n        let data: any = await fetch(url, requestOptions);\r\n        let resp: any = await data.json();\r\n        return resp;\r\n    }\r\n}\r\n","import React, { useState } from 'react';\r\nimport HttpService from '../core/HttpService';\r\n\r\nimport './InputPage.css';\r\n\r\nexport interface InputPageProps {\r\n\r\n}\r\n\r\nconst InputPage: React.FC<InputPageProps> = () => {\r\n    const httpService = new HttpService();\r\n    const [text, setText] = useState<string>('');\r\n\r\n    const getWords = (): string[] => {\r\n        return text.split('\\n').filter(word => word.trim().length > 0);\r\n    }\r\n\r\n    const sendWords = async (event: React.FormEvent<HTMLButtonElement>) => {\r\n        event.preventDefault()\r\n\r\n        const words: string[] = getWords();\r\n        const wordsString: string = JSON.stringify(words);\r\n\r\n        const queryParams = {\r\n            words: wordsString,\r\n        };\r\n        httpService.makeGetRequest('', queryParams);\r\n    }\r\n\r\n    return (\r\n        <div className=\"input-page\">\r\n            <textarea\r\n                value={text}\r\n                onChange={(e) => setText(e.target.value)}\r\n            />\r\n            <button type=\"submit\" onClick={sendWords}>Submit</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default InputPage;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport InputPage from './components/InputPage/InputPage';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"width-container\">\r\n        <p className=\"app-header\">Japanese Vocab Fetcher</p>\r\n        <InputPage />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}