{"version":3,"sources":["assets/icons/icon_error.svg","shared/ErrorMessage/ErrorMessage.tsx","shared/LoadingSpinner/LoadingSpinner.tsx","components/core/UtilsService.ts","components/core/HttpService.ts","components/InputPage/InputBox/InputBox.tsx","components/InputPage/InputPage.tsx","assets/icons/icon_play_button.svg","assets/icons/icon_stop_button.svg","components/ResultsList/ResultAudio/ResultAudioRow.tsx","assets/icons/icon_plus.svg","assets/icons/icon_minus.svg","components/ResultsList/ResultAudio/ResultAudioModule.tsx","components/ResultsList/ResultAudio/ResultAudio.tsx","components/ResultsList/ResultDefinitions/ResultDefinitionSense.tsx","components/ResultsList/ResultDefinitions/ResultDefinition.tsx","components/ResultsList/ResultDefinitions/ResultDefinitions.tsx","components/ResultsList/ResultReadings/ResultReadingsRow.tsx","components/ResultsList/ResultReadings/ResultReadings.tsx","components/ResultsList/ResultRelatedWords/ResultRelatedWord.tsx","components/ResultsList/ResultRelatedWords/ResultRelatedWords.tsx","components/ResultsList/ResultSentences/ResultSentence.tsx","components/ResultsList/ResultSentences/ResultSentences.tsx","components/ResultsList/ResultTags/ResultTag.tsx","components/ResultsList/ResultTags/ResultTags.tsx","components/ResultsList/ResultTitle/ResultTitle.tsx","assets/icons/icon_chevron_up.svg","assets/icons/icon_chevron_down.svg","components/ResultsList/ResultToggleBar/ResultToggleBar.tsx","components/ResultsList/ResultBlock.tsx","components/ResultsList/ResultsList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ErrorMessage","children","className","src","ErrorIcon","alt","LoadingSpinner","UtilsService","extractWordsFromInput","s","split","filter","char","url","queryParams","Object","entries","map","x","join","HttpService","API_URL","utilsService","this","slug","a","requestOptions","cache","headers","method","mode","referrer","addQueryParamsToUrl","fetch","data","status","Error","statusText","json","resp","InputBox","setWordList","setErrorOccurred","httpService","useState","text","setText","isLoading","setIsLoading","sendWords","useRef","current","words","JSON","stringify","makeGetRequest","console","log","handleUserKeyPress","useCallback","e","key","ctrlKey","useEffect","window","addEventListener","removeEventListener","textArea","name","value","onChange","target","wordsDisplay","word","index","submitButton","type","onClick","_","InputPage","errorOccurred","ResultAudioRow","rowIndex","audioData","isExpanded","Audio","audio","playing","setPlaying","currentTime","play","pause","IconStopButton","IconPlayButton","speaker","subtitle","ResultAudioModule","moduleTitle","setIsExpanded","length","IconMinus","IconPlus","ResultAudio","wanikaniData","wanikani","main_data","metadata","voice_actor_name","voice_description","forvoData","forvo","username","ResultDefinitionSense","ordinality","sense","dfn","english_definitions","wordType","parts_of_speech","tags","getWordType","ResultDefinition","definitionData","buildTitleText","reading","otherForms","japanese","slice","senses","ResultDefinitions","jisho","results","result","ResultReadingsRow","title","readings","ResultReadings","sitesAndReadings","ojad","accent","wadoku","suzuki","ResultRelatedWord","relatedWord","open","ResultRelatedWords","extra","ResultSentence","sentence","source","ja","en","ResultSentences","allSentences","sentences","ResultTag","tag","translatedTag","toLowerCase","replace","extractTags","jlpt","flat","some","is_common","push","ResultTags","ResultTitle","toggleIsExpanded","ResultToggleBar","imgSrc","IconChevronUp","IconChevronDown","Result","ResultsList","wordList","wordData","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e1ba76b0.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/icon_error.f3363445.svg\";","import React from 'react';\r\n\r\nimport ErrorIcon from \"../../assets/icons/icon_error.svg\";\r\nimport './ErrorMessage.css';\r\n\r\n\r\ninterface ErrorMessageProps {\r\n    children: string;\r\n}\r\n\r\nconst ErrorMessage: React.FunctionComponent<ErrorMessageProps> = ({ children }) => {\r\n    return (\r\n        <div className=\"error-message vertical-separation-large\">\r\n            <img src={ErrorIcon} alt=\"error icon\" />\r\n            { children }\r\n            <img src={ErrorIcon} alt=\"error icon\" />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ErrorMessage;\r\n","import React from 'react';\r\n\r\nimport './LoadingSpinner.css';\r\n\r\n\r\nconst LoadingSpinner: React.FC = () => {\r\n    return <div className=\"loader vertical-separation-large\" />;\r\n}\r\n\r\nexport default LoadingSpinner;\r\n","import QueryParams from \"../../types/QueryParams\";\r\n\r\n\r\nexport default class UtilsService {\r\n\r\n    addQueryParamsToUrl(url: string, queryParams: QueryParams): string {\r\n        let queryString = Object.entries(queryParams)\r\n            .map(x => x.join(\"=\"))\r\n            .join(\"&\");\r\n        return url + \"?\" + queryString;\r\n    }\r\n\r\n    extractWordsFromInput = (s: string): string[] => {\r\n        return s.split(/\\s+/).filter(char => char !== \"\");\r\n    }\r\n\r\n}\r\n","import QueryParams from \"../../types/QueryParams\";\r\nimport UtilsService from \"./UtilsService\";\r\n\r\n\r\nexport default class HttpService {\r\n\r\n    // API_URL: string = \"https://7z39hjjfg1.execute-api.eu-west-2.amazonaws.com\";\r\n    API_URL: string = \"https://3.8.95.26:5000\";\r\n    utilsService: UtilsService\r\n\r\n\r\n    constructor() {\r\n        this.utilsService = new UtilsService();\r\n    }\r\n\r\n\r\n    async makeGetRequest(slug: string, queryParams?: QueryParams): Promise<any> {\r\n        let url: string = this.API_URL + slug;\r\n        let cache: RequestCache = \"force-cache\"\r\n        let mode: RequestMode = \"cors\"\r\n        let requestOptions = {\r\n            cache: cache,\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n            },\r\n            method: \"GET\",\r\n            mode: mode,\r\n            referrer: 'about:client',\r\n        };\r\n\r\n        if (typeof queryParams !== \"undefined\") {\r\n            url = this.utilsService.addQueryParamsToUrl(url, queryParams)\r\n        };\r\n\r\n        let data: any = await fetch(url, requestOptions);\r\n        if (data.status === 404) {\r\n            throw new Error(\"An error occurred: \" + data.statusText);\r\n        }\r\n        let resp: any = await data.json();\r\n        return resp;\r\n    }\r\n}\r\n","import React, { useCallback, useState, useEffect, useRef } from 'react';\r\nimport TextareaAutosize from 'react-textarea-autosize';\r\nimport LoadingSpinner from '../../../shared/LoadingSpinner/LoadingSpinner';\r\n\r\nimport FullResponseItem from '../../../types/FullResponseItem';\r\nimport QueryParams from '../../../types/QueryParams';\r\n\r\nimport HttpService from '../../core/HttpService';\r\nimport UtilsService from '../../core/UtilsService';\r\n\r\nimport './InputBox.css';\r\n\r\ninterface InputBoxProps {\r\n    setWordList: (s: FullResponseItem[]) => void;\r\n    setErrorOccurred: (x: boolean) => void;\r\n}\r\n\r\nconst InputBox: React.FC<InputBoxProps> = ({ setWordList, setErrorOccurred }) => {\r\n    const httpService = new HttpService();\r\n    const utilsService = new UtilsService();\r\n\r\n    const [text, setText] = useState<string>('');\r\n    const [isLoading, setIsLoading] = useState<boolean>(false);\r\n\r\n    const sendWords = useRef(() => {})\r\n    sendWords.current = async () => {\r\n        setIsLoading(true);\r\n        setErrorOccurred(false);\r\n\r\n        const words: string[] = utilsService.extractWordsFromInput(text);\r\n        const queryParams: QueryParams = {\r\n            words: JSON.stringify(words),\r\n        };\r\n\r\n        try {\r\n            const resp = await httpService.makeGetRequest(\"/words\", queryParams);\r\n            setWordList(resp);\r\n            console.log(resp);\r\n        }\r\n        catch (error) {\r\n            setErrorOccurred(true);\r\n            console.log(error);\r\n        }\r\n        finally {\r\n            setIsLoading(false);\r\n        }\r\n    }\r\n\r\n    const handleUserKeyPress = useCallback(e => {\r\n        if (e.key === \"Enter\" && e.ctrlKey) {sendWords.current()}\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"keydown\", handleUserKeyPress);\r\n        return () => {\r\n            window.removeEventListener(\"keydown\", handleUserKeyPress);\r\n        };\r\n    }, [handleUserKeyPress]);\r\n\r\n    const textArea = (\r\n        <TextareaAutosize\r\n            name=\"main-input\"\r\n            className=\"main-input\"\r\n            value={text}\r\n            onChange={(e: any) => setText(e.target.value)}\r\n        />\r\n    );\r\n    const wordsDisplay = (\r\n        <div className=\"words-display vertical-separation-small\">\r\n            {utilsService.extractWordsFromInput(text).map((word, index) =>\r\n                <div key={index} className=\"word-display\">{word}</div>\r\n            )}\r\n        </div>\r\n    );\r\n    const submitButton = (\r\n        <button\r\n            className=\"button-primary vertical-separation-medium\"\r\n            type=\"submit\"\r\n            onClick={(_) => sendWords.current()}\r\n        >\r\n            Submit\r\n        </button>\r\n    );\r\n\r\n    return (\r\n        isLoading ? <LoadingSpinner /> : <>{textArea}{wordsDisplay}{submitButton}</>\r\n    );\r\n}\r\n\r\nexport default InputBox;\r\n","import React, { useState } from 'react';\r\nimport ErrorMessage from '../../shared/ErrorMessage/ErrorMessage';\r\nimport InputBox from './InputBox/InputBox';\r\n\r\nimport FullResponseItem from '../../types/FullResponseItem';\r\n\r\nimport './InputPage.css';\r\n\r\n\r\nexport interface InputPageProps {\r\n    setWordList: (s: FullResponseItem[]) => void;\r\n}\r\n\r\nconst InputPage: React.FC<InputPageProps> = ({ setWordList }) => {\r\n    const [errorOccurred, setErrorOccurred] = useState<boolean>(false);\r\n\r\n    return (\r\n        <div className=\"input-page\">\r\n            <InputBox setWordList={setWordList} setErrorOccurred={setErrorOccurred}/>\r\n            { errorOccurred ? <ErrorMessage>An error occurred. Please try again</ErrorMessage> : <></> }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default InputPage;\r\n","export default __webpack_public_path__ + \"static/media/icon_play_button.7a4d59b8.svg\";","export default __webpack_public_path__ + \"static/media/icon_stop_button.00ad3332.svg\";","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nimport ResultAudioRowData from '../../../types/ResultAudioRowData';\r\n\r\nimport IconPlayButton from '../../../assets/icons/icon_play_button.svg'\r\nimport IconStopButton from '../../../assets/icons/icon_stop_button.svg'\r\n\r\n\r\ninterface ResultAudioRowProps {\r\n    rowIndex: number;\r\n    audioData: ResultAudioRowData;\r\n    isExpanded: boolean;\r\n}\r\n\r\nconst ResultAudioRow: React.FC<ResultAudioRowProps> = ({ rowIndex, audioData, isExpanded }) => {\r\n    const [audio] = useState(new Audio(audioData.url));\r\n    const [playing, setPlaying] = useState(false);\r\n\r\n    const togglePlaying = () => setPlaying(!playing);\r\n\r\n    useEffect(() => {\r\n            audio.currentTime = 0;\r\n            playing ? audio.play() : audio.pause();\r\n        },\r\n        [playing]\r\n    );\r\n\r\n    useEffect(() => {\r\n        audio.addEventListener('ended', () => setPlaying(false));\r\n        return () => {\r\n            audio.removeEventListener('ended', () => setPlaying(false));\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        (isExpanded || rowIndex < 2) ?\r\n        <div className=\"result-audio-row flex-row\">\r\n            <img\r\n                src={ playing ? IconStopButton : IconPlayButton }\r\n                alt=\"audio player icon\"\r\n                className=\"audio-player\"\r\n                onClick={togglePlaying}\r\n            />\r\n            <div className=\"result-audio-speaker\">{ audioData.speaker }</div>\r\n            <div className=\"result-audio-subtitle\">{ audioData.subtitle || \"\" }</div>\r\n        </div> :\r\n        <></>\r\n     );\r\n}\r\n\r\nexport default ResultAudioRow;\r\n","export default __webpack_public_path__ + \"static/media/icon_plus.2cc3b49e.svg\";","export default __webpack_public_path__ + \"static/media/icon_minus.b9223dca.svg\";","import React, { useState } from 'react';\r\nimport ResultAudioRow from './ResultAudioRow';\r\n\r\nimport ResultAudioRowData from '../../../types/ResultAudioRowData';\r\n\r\nimport IconPlus from '../../../assets/icons/icon_plus.svg'\r\nimport IconMinus from '../../../assets/icons/icon_minus.svg'\r\n\r\n\r\ninterface ResultAudioModuleProps {\r\n    moduleTitle: string;\r\n    audioData: ResultAudioRowData[];\r\n}\r\n\r\nconst ResultAudioModule: React.FC<ResultAudioModuleProps> = ({ moduleTitle, audioData}) => {\r\n    const [isExpanded, setIsExpanded] = useState<boolean>(false);\r\n    const toggleIsExpanded = () => setIsExpanded(!isExpanded);\r\n\r\n    return (\r\n        <div className=\"result-audio-module vertical-separation-small\">\r\n            <div className=\"audio-module-title\">{ moduleTitle }</div>\r\n            {audioData.map((audio, rowIndex) =>\r\n                <ResultAudioRow key={audio.speaker} rowIndex={rowIndex} audioData={audio} isExpanded={isExpanded}/>\r\n            )}\r\n            {audioData.length > 2 &&\r\n                <div className=\"audio-expand-toggle\" onClick={toggleIsExpanded}>\r\n                    <img\r\n                        src={isExpanded ? IconMinus : IconPlus}\r\n                        alt=\"button to toggle expanded list of audio files\"\r\n                    />\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ResultAudioModule;\r\n","import React from 'react';\r\n\r\nimport FullResponseItem from '../../../types/FullResponseItem';\r\nimport ResultAudioRowData from '../../../types/ResultAudioRowData';\r\n\r\nimport './ResultAudio.css'\r\nimport ResultAudioModule from './ResultAudioModule';\r\n\r\n\r\ninterface ResultAudioProps {\r\n    data: FullResponseItem;\r\n}\r\n\r\nconst ResultAudio: React.FC<ResultAudioProps> = ({ data }) => {\r\n\r\n    const wanikaniData: ResultAudioRowData[] = data.wanikani.main_data.audio.map(audio => ({\r\n        url: audio.url,\r\n        speaker: audio.metadata.voice_actor_name,\r\n        subtitle: audio.metadata.voice_description,\r\n    }))\r\n    const forvoData: ResultAudioRowData[] = data.forvo.main_data.audio.map(audio => ({\r\n        url: audio.url,\r\n        speaker: audio.username,\r\n        subtitle: null,\r\n    }))\r\n    const japanesePodData: ResultAudioRowData[] = [{\r\n        url: \"https://audiostock-public-files.s3.ap-northeast-1.amazonaws.com/sample-files/demo_34d52dc1ec6ba4736f37c24458a2a7812e9b56f6.mp3\",\r\n        speaker: \"Coming soon!\",\r\n        subtitle: null\r\n    }]\r\n\r\n    return (\r\n        <div className=\"result-audio\">\r\n            <div className=\"left-col-title\">\r\n                Audio\r\n            </div>\r\n            {wanikaniData.length > 0 && <ResultAudioModule moduleTitle=\"Wanikani\" audioData={wanikaniData} />}\r\n            {forvoData.length > 0 && <ResultAudioModule moduleTitle=\"Forvo\" audioData={forvoData} />}\r\n            <ResultAudioModule moduleTitle=\"JapanesePod101\" audioData={japanesePodData} />\r\n        </div>\r\n     );\r\n}\r\n\r\nexport default ResultAudio;\r\n","import React from 'react';\r\n\r\nimport { JishoAPIItemSense } from '../../../types/ResponseItemJisho';\r\n\r\n\r\ninterface ResultDefinitionSenseProps {\r\n    ordinality: number;\r\n    sense: JishoAPIItemSense;\r\n}\r\n\r\nconst ResultDefinitionSense: React.FC<ResultDefinitionSenseProps> = ({ ordinality, sense }) => {\r\n\r\n    const dfn: string = ordinality + '. ' + sense.english_definitions.join(\"; \");\r\n\r\n    const getWordType = (): string => {\r\n        let wordType = sense.parts_of_speech.join(\", \");\r\n        if (sense.tags.length > 0) {\r\n            wordType += \" (\" + sense.tags.join(\", \") + \")\";\r\n        }\r\n        return wordType;\r\n    }\r\n\r\n    return (\r\n        <div className=\"result-definition-sense flex-col\">\r\n            <div className=\"sense-part-of-speech\">{ getWordType() }</div>\r\n            <div className=\"sense-english-definition\">{ dfn }</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ResultDefinitionSense;\r\n","import React from 'react';\r\nimport ResultDefinitionSense from './ResultDefinitionSense';\r\n\r\nimport { JishoAPIItem, JishoAPIItemJapanese } from '../../../types/ResponseItemJisho';\r\n\r\n\r\ninterface ResultDefinitionProps {\r\n    definitionData: JishoAPIItem;\r\n}\r\n\r\nconst ResultDefinition: React.FC<ResultDefinitionProps> = ({ definitionData }) => {\r\n    const buildTitleText = (word: JishoAPIItemJapanese): string => {\r\n        const main = word.word || word.reading || \"\";\r\n        const subtext = (word.word && word.reading) ? `【${word.reading}】` : \"\";\r\n        return main + subtext;\r\n    }\r\n\r\n    const otherForms = definitionData.japanese.slice(1);\r\n    const showOtherForms = (): boolean => (otherForms.length > 0);\r\n\r\n    return (\r\n        <div className=\"result-definition flex-col\">\r\n            <div className=\"result-definition-title\">\r\n                { buildTitleText(definitionData.japanese[0]) }\r\n            </div>\r\n            <div className=\"result-definition-senses-container flex-col\">\r\n                { definitionData.senses.map((sense, index) =>\r\n                    <ResultDefinitionSense key={index} ordinality={index+1} sense={sense} />\r\n                )}\r\n                {\r\n                    showOtherForms() &&\r\n                    <div className=\"result-definition-other-forms flex-col\">\r\n                        <div className=\"result-other-forms-title\">Other forms</div>\r\n                        <div className=\"result-other-forms-words\">\r\n                            { otherForms.map(buildTitleText).join(\"、\") }\r\n                        </div>\r\n                    </div>\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ResultDefinition;\r\n","import React from 'react';\r\nimport ResultDefinition from './ResultDefinition';\r\n\r\nimport FullResponseItem from '../../../types/FullResponseItem';\r\n\r\nimport './ResultDefinitions.css';\r\n\r\n\r\ninterface ResultDefinitionsProps {\r\n    data: FullResponseItem;\r\n}\r\n\r\nconst ResultDefinitions: React.FC<ResultDefinitionsProps> = ({ data }) => {\r\n    return (\r\n        <div className=\"result-definitions-container flex-col\">\r\n            { data.jisho.main_data.results.map(result =>\r\n                <ResultDefinition key={result.slug} definitionData={result} />\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ResultDefinitions;\r\n","import React from 'react';\r\n\r\n\r\ninterface ResultReadingsRowProps {\r\n    title: string;\r\n    readings: string[];\r\n}\r\n\r\nconst ResultReadingsRow: React.FC<ResultReadingsRowProps> = ({ title, readings }) => {\r\n    return (\r\n        <div className=\"readings-row\">\r\n            <div className=\"readings-row-left\">{ title }:</div>\r\n            <div className=\"readings-row-right\">\r\n                { readings.map((reading, index) => <div key={index} className=\"reading\">{ reading }</div>) }\r\n            </div>\r\n        </div>\r\n     );\r\n}\r\n\r\nexport default ResultReadingsRow;\r\n","import React from 'react';\r\n\r\nimport FullResponseItem from '../../../types/FullResponseItem';\r\n\r\nimport './ResultReadings.css';\r\nimport ResultReadingsRow from './ResultReadingsRow';\r\n\r\n\r\ninterface ResultReadingsProps {\r\n    data: FullResponseItem;\r\n}\r\n\r\nconst ResultReadings: React.FC<ResultReadingsProps> = ({ data }) => {\r\n    const sitesAndReadings = [\r\n        { title: \"OJAD\", readings: data.ojad.main_data.accent },\r\n        { title: \"Wadoku\", readings: data.wadoku.main_data.accent },\r\n        { title: \"Suzuki\", readings: data.suzuki.main_data.accent },\r\n    ];\r\n\r\n    return (\r\n        <div className=\"result-readings\">\r\n            <div className=\"left-col-title\">\r\n                Readings\r\n            </div>\r\n            {sitesAndReadings.map(({ title, readings }) =>\r\n                <ResultReadingsRow key={title} title={title} readings={readings} />\r\n            )}\r\n        </div>\r\n     );\r\n}\r\n\r\nexport default ResultReadings;\r\n","import React from 'react';\r\n\r\nimport { JishoExtraItem } from '../../../types/ResponseItemJisho';\r\n\r\n\r\ninterface ResultRelatedWordProps {\r\n    relatedWord: JishoExtraItem;\r\n}\r\n\r\nconst ResultRelatedWord: React.FC<ResultRelatedWordProps> = ({ relatedWord }) => {\r\n    const { slug, japanese } = relatedWord;\r\n\r\n    const url = `https://jisho.org/word/${slug}`;\r\n\r\n    return (\r\n        <div\r\n            className=\"related-word\"\r\n            onClick={()=> window.open(url, \"_blank\")}\r\n        >\r\n            { japanese[0].word || japanese[0].reading }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ResultRelatedWord;\r\n","import React from 'react';\r\nimport ResultRelatedWord from './ResultRelatedWord';\r\n\r\nimport FullResponseItem from '../../../types/FullResponseItem';\r\n\r\nimport './ResultRelatedWords.css';\r\n\r\n\r\ninterface ResultRelatedWordsProps {\r\n    data: FullResponseItem;\r\n}\r\n\r\nconst ResultRelatedWords: React.FC<ResultRelatedWordsProps> = ({ data }) => {\r\n    return (\r\n        <div className=\"result-related-words vertical-separation-small\">\r\n            <div className=\"left-col-title\">\r\n                Related words\r\n            </div>\r\n            <div className=\"related-words-container flex-row\">\r\n                {data.jisho.main_data.extra.map(result =>\r\n                    <ResultRelatedWord key={result.slug} relatedWord={result}/>\r\n                )}\r\n            </div>\r\n        </div>\r\n     );\r\n}\r\n\r\nexport default ResultRelatedWords;\r\n","import React from 'react';\r\n\r\nimport Sentence from '../../../types/Sentence';\r\n\r\n\r\ninterface ResultSentenceProps {\r\n    sentence: Sentence;\r\n    source: string;\r\n}\r\n\r\nconst ResultSentence: React.FC<ResultSentenceProps> = ({ sentence, source }) => {\r\n    return (\r\n        <div className=\"result-sentence flex-col\">\r\n            <div className=\"result-sentence-top flex-row\">\r\n                <div className=\"result-sentence-ja\">{ sentence.ja }</div>\r\n                <div className=\"result-sentence-source\">{ `- ${source}` }</div>\r\n            </div>\r\n            <div className=\"result-sentence-en\">{ sentence.en }</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ResultSentence;\r\n","import React from 'react';\r\nimport ResultSentence from './ResultSentence';\r\n\r\nimport FullResponseItem from '../../../types/FullResponseItem';\r\n\r\nimport './ResultSentences.css';\r\n\r\n\r\ninterface ResultSentencesProps {\r\n    data: FullResponseItem;\r\n}\r\n\r\nconst ResultSentences: React.FC<ResultSentencesProps> = ({ data }) => {\r\n    const allSentences = [\r\n        ...data.wanikani.main_data.sentences.map(s => ({sentence: s, source: \"Wanikani\"})),\r\n    ];\r\n\r\n    return (\r\n        allSentences.length > 0 ?\r\n        <div className=\"result-sentences flex-col\">\r\n            <div className=\"right-col-title\">Context Sentences</div>\r\n            <div className=\"result-sentences-container flex-col\">\r\n                {allSentences.map(({ sentence, source }) =>\r\n                    <ResultSentence key={sentence.ja} sentence={sentence} source={source} />\r\n                )}\r\n            </div>\r\n        </div> :\r\n        <></>\r\n    );\r\n}\r\n\r\nexport default ResultSentences;\r\n","import React from 'react';\r\n\r\n\r\ninterface ResultTagProps {\r\n    tag: string;\r\n}\r\n\r\nconst ResultTag: React.FC<ResultTagProps> = ({ tag }) => {\r\n    const translatedTag = (\r\n        tag.slice(0,8) === \"wanikani\" ?\r\n        `wanikani level ${tag.slice(8)}` :\r\n        tag.toLowerCase().replace(\"-\", \" \")\r\n    );\r\n\r\n    return <div className=\"result-tag\">{ translatedTag }</div> ;\r\n}\r\n\r\n\r\n\r\nexport default ResultTag;\r\n","import React from 'react';\r\nimport ResultTag from './ResultTag';\r\n\r\nimport FullResponseItem from '../../../types/FullResponseItem';\r\n\r\nimport './ResultTags.css'\r\n\r\n\r\ninterface ResultTagProps {\r\n    data: FullResponseItem;\r\n}\r\n\r\nconst ResultTags: React.FC<ResultTagProps> = ({ data }) => {\r\n    const tags = extractTags(data);\r\n\r\n    return ( <div className=\"result-tags-container flex-row\">\r\n        { tags.map(tag =>\r\n            <ResultTag key={tag} tag={tag} />\r\n        )}\r\n    </div> );\r\n}\r\n\r\n\r\nconst extractTags = (data: FullResponseItem): string[] => {\r\n    let tags = data.jisho.main_data.results.map(result => [result.jlpt, result.tags]).flat(2);\r\n    if (data.jisho.main_data.results.some(result => result.is_common)) {\r\n        tags.push(\"common word\");\r\n    }\r\n    return tags;\r\n}\r\n\r\nexport default ResultTags;\r\n","import React from 'react';\r\n\r\nimport './ResultTitle.css';\r\n\r\n\r\ninterface ResultTitleProps {\r\n    children: string;\r\n    isExpanded: boolean;\r\n    toggleIsExpanded: () => void;\r\n}\r\n\r\nconst ResultTitle: React.FC<ResultTitleProps> = ({ children, isExpanded, toggleIsExpanded }) => {\r\n\r\n    return (\r\n        <div className=\"result-title\">\r\n            <div className=\"result-title-text\">{ children }</div>\r\n            <div\r\n                className=\"title-collapser\"\r\n                onClick={toggleIsExpanded}\r\n            >\r\n                { isExpanded ? \"collapse\" : \"expand\" }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ResultTitle;\r\n","export default __webpack_public_path__ + \"static/media/icon_chevron_up.0c1b14a0.svg\";","export default __webpack_public_path__ + \"static/media/icon_chevron_down.fee13e32.svg\";","import React from 'react';\r\n\r\nimport IconChevronUp from '../../../assets/icons/icon_chevron_up.svg';\r\nimport IconChevronDown from '../../../assets/icons/icon_chevron_down.svg';\r\nimport './ResultToggleBar.css';\r\n\r\n\r\ninterface ResultToggleBarProps {\r\n    isExpanded: boolean;\r\n    toggleIsExpanded: () => void;\r\n}\r\n\r\nconst ResultToggleBar: React.FC<ResultToggleBarProps> = ({ isExpanded, toggleIsExpanded }) => {\r\n    const imgSrc = isExpanded ? IconChevronUp : IconChevronDown;\r\n\r\n    return (\r\n        <div\r\n            className=\"result-toggle-bar\"\r\n            onClick={toggleIsExpanded}\r\n        >\r\n            <img src={imgSrc} alt=\"chevron to expand or collapse the result\"/>\r\n        </div>\r\n     );\r\n}\r\n\r\nexport default ResultToggleBar;\r\n","import React, { useState } from 'react';\r\nimport ResultAudio from './ResultAudio/ResultAudio';\r\nimport ResultDefinitions from './ResultDefinitions/ResultDefinitions';\r\nimport ResultReadings from './ResultReadings/ResultReadings';\r\nimport ResultRelatedWords from './ResultRelatedWords/ResultRelatedWords';\r\nimport ResultSentences from './ResultSentences/ResultSentences';\r\nimport ResultTags from './ResultTags/ResultTags';\r\nimport ResultTitle from './ResultTitle/ResultTitle';\r\nimport ResultToggleBar from './ResultToggleBar/ResultToggleBar';\r\n\r\nimport FullResponseItem from '../../types/FullResponseItem';\r\n\r\nimport './ResultBlock.css';\r\n\r\n\r\ninterface ResultProps {\r\n    data: FullResponseItem;\r\n}\r\n\r\nconst Result: React.FunctionComponent<ResultProps> = ({ data }) => {\r\n    const [isExpanded, setIsExpanded] = useState<boolean>(true);\r\n    const toggleIsExpanded = () => setIsExpanded(!isExpanded);\r\n\r\n    // const wanikaniData = data.wanikani;\r\n\r\n    return (\r\n        <div className=\"result-block flex-col\">\r\n            <ResultTitle\r\n                isExpanded={isExpanded}\r\n                toggleIsExpanded={toggleIsExpanded}\r\n            >{ data.word }</ResultTitle>\r\n            { isExpanded &&\r\n                <div className=\"flex-row\">\r\n                    <div className=\"result-left-col flex-col\">\r\n                        <ResultReadings data={data} />\r\n                        <ResultTags data={data} />\r\n                        <ResultAudio data={data} />\r\n                        <ResultRelatedWords data={data} />\r\n                    </div>\r\n                    <div className=\"result-col-separator\" />\r\n                    <div className=\"result-right-col flex-col\">\r\n                        <ResultDefinitions data={data} />\r\n                        <ResultSentences data={data} />\r\n                    </div>\r\n                </div>\r\n            }\r\n            <ResultToggleBar isExpanded={isExpanded} toggleIsExpanded={toggleIsExpanded}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Result;\r\n","import React from 'react';\r\nimport ResultBlock from './ResultBlock';\r\n\r\nimport FullResponseItem from '../../types/FullResponseItem';\r\n\r\n// import testWordList from './testWordList';\r\nimport './ResultsList.css';\r\n\r\n\r\ninterface ResultsListProps {\r\n    wordList: FullResponseItem[];\r\n}\r\n\r\nconst ResultsList: React.FC<ResultsListProps> = ({ wordList }) => {\r\n    return (\r\n        <div className=\"results-list\">\r\n            {\r\n                wordList.map(wordData =>\r\n                    <ResultBlock key={wordData.word} data={wordData} />\r\n                )\r\n            }\r\n        </div>\r\n     );\r\n}\r\n\r\nexport default ResultsList;\r\n","import { useState } from 'react';\r\nimport InputPage from './components/InputPage/InputPage';\r\nimport ResultsList from './components/ResultsList/ResultsList';\r\n\r\nimport FullResponseItem from './types/FullResponseItem';\r\n\r\nimport './App.css';\r\n\r\n\r\nfunction App() {\r\n    const [wordList, setWordList] = useState<FullResponseItem[]>([]);\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <div className=\"width-container\">\r\n                <p className=\"app-header\">Japanese Vocab Fetcher</p>\r\n                <InputPage setWordList={setWordList} />\r\n                <ResultsList wordList={wordList} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}